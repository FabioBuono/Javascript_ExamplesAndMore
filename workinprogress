
// ----------------------------- //
// Some Javascript Code Examples //
// ----------------------------- //

// ------------------------------------------------------------------ //
const add = (x,y) => x+y;
const add3 = partial(add,3);
add3(2)==5;

// ------------------------------------------------------------------ //
2. Closure

var sum = (x,y) => {
  return (y) => {x+y};
}
var mulThree = sum(3);
mulThree(2);


// ------------------------------------------------------------------ //

const somma = x => y => x+y;

// ------------------------------------------------------------------ //

function somma(x,y)=>x*y;
const aliasSomma = somma;

// ------------------------------------------------------------------ //


function double(n)=> {return name.map(n => n*2);}
double([1,2,3]);


// ------------------------------------------------------------------ //

const head = ([x]) => x

// ------------------------------------------------------------------ //

const array = (...elements) => {
  return elements;
}
console.log((array(1,2,3))[2]);

Another way:

const tail = ([, ...xs]) => xs;
const tail = ([x, ...xs]) => xs;

// ------------------------------------------------------------------ //


const logs = (...args) => {
  console.log(...args);
}
logs(1,2,3, "a");



const langs = ["javascript","b","c"];
const [js, ...rest] = langs;
console.log(js === "javascript");
console.log(rest[0] === "b");
console.log(rest[1] === "b");

// ------------------------------------------------------------------ //

const second = ([x,y,...argss]) => y;

// ------------------------------------------------------------------ //

const head = ([x]) => x;

// ------------------------------------------------------------------ //

function pari(arg){
  return ((arg%2)==0);
}


const if_ntn = ([...args], f,n = 0) => {
  return (args.filter(f))[n];
}

console.log(head([11,22,33]));
console.log(second([11,22,33]));
console.log("pari: "+ if_ntn([11,22,33,44,66],pari,1));
console.log("pari: "+ if_ntn([11,22,33,44,66],pari));

// ------------------------------------------------------------------ //

const partialFromBind =(fn, ...args) => {
  return fn.bind(null, ...args);
}
const partial = (fn, ...args) => {
  return (...otherArgs) => {
    return fn(...args, ...otherArgs)
  };
};

// ------------------------------------------------------------------ //

const def = x => typeof x !== 'undefined'
const undef = x => !def(x)


// ------------------------------------------------------------------ //

// Copy array
const copy = array => [...array]

// ------------------------------------------------------------------ //

const length = ([x, ...xs], len = 0) => def(x) ? length(xs, len + 1) : len;
const length = ([x, ...xs]) => def(x) ? 1 + length(xs) : 0;
const length = ([x, ...xs], len = 0) => def(x) ? length(xs, len + 1) : len
const length = ([x, ...xs]) => def(x) ? 1 + length(xs) : 0

// ------------------------------------------------------------------ //

const reverse = ([x, ...xs]) => def(x) ? [...reverse(xs), x] : []   // ha senso perchÃ© array.reverse() cambia l'origine

// ------------------------------------------------------------------ //

const first = ([x, ...xs], n = 1) => def(x) && n ? [x, ...first(xs, n - 1)] : []  // return first n

// ------------------------------------------------------------------ //

const last = (xs, n = 1) => reverse(first(reverse(xs), n))

// ------------------------------------------------------------------ //

const slice = ([x, ...xs], i, y, curr = 0) => def(x)
  ? curr === i
    ? [y, x, ...slice(xs, i, y, curr + 1)]
    : [x, ...slice(xs, i, y, curr + 1)]
  : []

const array = [1,2,4,5]
slice(array, 2, 3) 

// ------------------------------------------------------------------ //

const isArray = x => Array.isArray(x)

// ------------------------------------------------------------------ //

const flatten = ([x, ...xs]) => def(x)
    ? isArray(x) ? [...flatten(x), ...flatten(xs)] : [x, ...flatten(xs)]
    : []

flatten([array1, array2])

// ------------------------------------------------------------------ //

const swap = (a, i, j) => (
  map(a, (x,y) => {
    if(y === i) return a[j]
    if(y === j) return a[i]
    return x
  })
)

const array = [1,2,3,4,5]
swap(array, 0, 4) // [5,2,3,4,1]

// ------------------------------------------------------------------ //

const map = ([x, ...xs], fn) => {
  if (undef(x)) return []
  return [fn(x), ...map(xs, fn)]
}

const map = ([x, ...xs], fn) => def(x) ? [fn(x), ...map(xs, fn)] : []

// ------------------------------------------------------------------ //

const filter = ([x, ...xs], fn) => {
  if (undef(x)) return []
  if (fn(x)) {
    return [x, ...filter(xs, fn)]
  } else {
    return [...filter(xs, fn)]
  }
}


const filter = ([x, ...xs], fn) => def(x) 
    ? fn(x)
        ? [x, ...filter(xs, fn)] : [...filter(xs, fn)]
    : []

// ------------------------------------------------------------------ //

const reject = ([x, ...xs], fn) => {
  if (undef(x)) return []
  if (!fn(x)) {
    return [x, ...reject(xs, fn)]
  } else {
    return [...reject(xs, fn)]
  }
}

// ------------------------------------------------------------------ //

const partition = (xs, fn) => [filter(xs, fn), reject(xs, fn)]


const even = x => x % 2 === 0
const array = [0,1,2,3,4,5]
partition(array, even) // [[0,2,4], [1,3,5]]

// ------------------------------------------------------------------ //

const reduce = ([x, ...xs], fn, memo, i) => {
  if (undef(x)) return memo
  return reduce(xs, fn, fn(memo, x, i), i + 1)
}


const reduce = ([x, ...xs], fn, memo, i = 0) => def(x)
    ? reduce(xs, fn, fn(memo, x, i), i + 1) : memo



const sum = (memo, x) => memo + x
reduce([1,2,3], sum, 0) // 6


// ------------------------------------------------------------------ //

function reduce(combine, base, array) {
  forEach(array, function (element) {
    base = combine(base, element);
  });
  return base;
}

function add(a, b) {
  return a + b;
}

function sum(numbers) {
  return reduce(add, 0, numbers);
}



// ------------------------------------------------------------------ //

const reduceRight = (xs, fn, memo) => reduce(reverse(xs), fn, memo)

reduceRight([[0,1], [2,3], [4,5]], flatten, []) // [4, 5, 2, 3, 0, 1]

// ------------------------------------------------------------------ //

const partial = (fn, ...args) => (...newArgs) => fn(...args, ...newArgs)


const add = (x,y) => x + y
const add5to = partial(add, 5)
add5to(10) // 15

// ------------------------------------------------------------------ //

const spreadArg = (fn) => (...args) => fn(args)

// ------------------------------------------------------------------ //

const add = ([x, ...xs]) => def(x) ? parseInt(x + add(xs)) : []

add([1,2,3,4,5]) // 15
const spreadAdd = spreadArg(add)
spreadAdd(1,2,3,4,5) // 15

// ------------------------------------------------------------------ //

const reverseArgs = (fn) => (...args) => fn(...reverse(args))


const divide = (x,y) => x / y
divide(100,10) // 10

const reverseDivide = reverseArgs(divide)
reverseDivide(100,10) // 0.1

// ------------------------------------------------------------------ //

const pluck = (key, object) => object[key]


const product = {price: 15}
pluck('price', product) // 15

const getPrices = partial(pluck, 'price')

const products = [
  {price: 10},
  {price: 5},
  {price: 1}
]
map(products, getPrices) // [10,5,1]

// ------------------------------------------------------------------ //


function compose(func1, func2) {
  return function() {
    return func1(func2.apply(null, arguments));
  };
}

// ------------------------------------------------------------------ //

var isUndefined = partial(op["==="], undefined);
var isDefined = compose(op["!"], isUndefined);
show(isDefined(Math.PI));
show(isDefined(Math.PIE));

// ------------------------------------------------------------------ //

const min = ([x, ...xs], result = Infinity) => def(x)
    ? x < result
        ? min(xs, x)
        : result
    : result

// ------------------------------------------------------------------ //

const max = ([x, ...xs], result = -Infinity) => def(x)
    ? x > result
        ? max(xs, x)
        : max(xs, result)
    : result

// ------------------------------------------------------------------ //

const factorial = (x, acum = 1) => x ? factorial(x - 1, x * acum) : acum

// ------------------------------------------------------------------ //

const fib = x => x > 2 ? fib(x - 1) + fib(x - 2) : 1

// ------------------------------------------------------------------ //

const quicksort = (xs) => length(xs)
  ? flatten([
    quicksort(filter(tail(xs), x => x <= head(xs))),
    head(xs),
    quicksort(filter(tail(xs), x => x > head(xs)))
  ])
  : []


// ------------------------------------------------------------------ //

Defined using reduce:

const reduce = ([x, ...xs], f, memo, i = 0) => def(x)
    ? reduce(xs, f, f(memo, x, i), i + 1) : memo

const reverse = xs => reduce(xs, (memo, x) => [x, ...memo], [])

const length = xs => reduce(xs, (memo, x) => memo + 1, 0)

const map = (xs, fn) => reduce(xs, (memo, x) => [...memo, fn(x)], [])

const filter = (xs, fn) => reduce(xs, (memo, x) => fn(x)
    ? [...memo, x] : [...memo], [])

const reject = (xs, fn) => reduce(xs, (memo, x) => fn(x)
    ? [...memo] : [...memo, x], [])

const first = (xs, n) => reduce(xs, (memo, x, i) => i < n
    ? [...memo, x] : [...memo], [])

const last = (xs, n) => reduce(xs, (memo, x, i) => i >= (length(xs) - n)
    ? [...memo, x] : [...memo], [])

const merge = spreadArg(xs => reduce(xs, (memo, x) => [...memo, ...x], []))

const flatten = xs => reduce(xs, (memo, x) => x
    ? isArray(x) ? [...memo, ...flatten(x)] : [...memo, x] : [], [])

const add = spreadArg(([x, ...xs]) => reduce(xs, (memo, y) => memo + y, x))

const divide = spreadArg(([x, ...xs]) => reduce(xs, (memo, y) => memo / y, x))

const multiply = spreadArg(([x, ...xs]) => reduce(xs, (memo, y) => memo * y, x))



Example usage:

reverse([1,2,3]) // [3,2,1]
length([1,2,3]) // 3
map([1,2,3], double) // [2,3,4]
filter([1,2,3,4], even) // [2,4]
reject([1,2,3,4], even) // [1,3]
first([1,2,3,4], 3) // [1,2,3]
last([1,2,3,4], 2) // [3,4]
merge([1,2,3],[4,5,6]) // [1,2,3,4,5,6]
flatten([1,[2,3,[4,[5,[[6]]]]]]) // [1,2,3,4,5,6]
add(1,2,3,4,5) // 15
multiply(2,5,10) // 100
divide(100,2,5) // 10




